Project Path: bearby.io

Source Tree:

```
bearby.io
├── tailwind.config.js
├── integrations.config.tsx
├── next.config.js
├── README.md
├── public
│   └── images
│       ├── favicon.ico
│       ├── cta
│       │   └── grid.svg
│       ├── features
│       │   ├── icon-04.svg
│       │   ├── icon-05.svg
│       │   ├── icon-07.svg
│       │   ├── icon-06.svg
│       │   ├── icon-02.svg
│       │   ├── icon-03.svg
│       │   ├── icon-01.svg
│       │   ├── logo.png
│       │   ├── shape-01.png
│       │   ├── shape-02.svg
│       │   ├── shape-03.svg
│       │   ├── shape-04.svg
│       │   ├── shape-05.svg
│       │   └── big-icon.svg
│       ├── 404.svg
│       ├── user
│       │   ├── user-06.png
│       │   ├── user-07.png
│       │   ├── user-05.png
│       │   ├── user-04.png
│       │   ├── user-01.png
│       │   ├── user-03.png
│       │   ├── user-02.png
│       │   ├── user-09.png
│       │   └── user-08.png
│       ├── about
│       │   └── about.svg
│       ├── blog
│       │   ├── quote-shape-1.svg
│       │   └── quote-shape-2.svg
│       ├── logo
│       │   └── logo.png
│       ├── team
│       │   └── rinat.jpeg
│       ├── blur
│       │   ├── blur-16.svg
│       │   ├── blur-02.svg
│       │   ├── blur-03.svg
│       │   ├── blur-17.svg
│       │   ├── blur-01.svg
│       │   ├── blur-15.svg
│       │   ├── blur-14.svg
│       │   ├── blur-04.svg
│       │   ├── blur-10.svg
│       │   ├── blur-11.svg
│       │   ├── blur-05.svg
│       │   ├── blur-13.svg
│       │   ├── blur-07.svg
│       │   ├── blur-06.svg
│       │   ├── blur-12.svg
│       │   ├── blur-23.svg
│       │   ├── blur-22.svg
│       │   ├── blur-20.svg
│       │   ├── blur-08.svg
│       │   ├── blur-09.svg
│       │   ├── blur-21.svg
│       │   ├── blur-19.svg
│       │   ├── blur-24.svg
│       │   └── blur-18.svg
│       ├── hero
│       │   ├── hero.svg
│       │   └── icon-title.svg
│       └── pricing
│           ├── pricing-icon-02.svg
│           ├── pricing-icon-03.svg
│           ├── pricing-icon-01.svg
│           ├── pricing-icon-04.svg
│           ├── photo_3_2025-01-19_10-40-19.jpg
│           ├── photo_1_2025-01-19_10-40-19.jpg
│           └── photo_2_2025-01-19_10-40-19.jpg
├── package.json
├── tsconfig.json
├── project-structure.txt
├── postcss.config.js
├── stripe
│   └── pricingData.ts
└── src
    ├── types
    │   ├── aiExample.ts
    │   ├── blog.ts
    │   ├── faq.ts
    │   ├── menu.ts
    │   ├── footerLink.ts
    │   ├── review.ts
    │   ├── team.ts
    │   ├── feature.ts
    │   └── client.ts
    ├── app
    │   ├── sitemap.js
    │   ├── favicon.ico
    │   ├── context
    │   │   ├── ToastContext.tsx
    │   │   └── AuthContext.tsx
    │   ├── (site)
    │   │   ├── about
    │   │   │   └── page.tsx
    │   │   ├── docs
    │   │   │   ├── page.tsx
    │   │   │   └── [slug]
    │   │   │       └── page.tsx
    │   │   ├── blog
    │   │   │   ├── author
    │   │   │   │   └── [slug]
    │   │   │   │       └── page.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── [slug]
    │   │   │       └── page.tsx
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── error
    │   │   │   └── page.tsx
    │   │   └── pricing
    │   │       └── page.tsx
    │   ├── api
    │   │   ├── auth
    │   │   │   └── [...nextauth]
    │   │   │       └── route.ts
    │   │   ├── payment
    │   │   │   └── route.ts
    │   │   ├── generate-content
    │   │   │   └── route.ts
    │   │   ├── register
    │   │   │   └── route.ts
    │   │   ├── forgot-password
    │   │   │   ├── update
    │   │   │   │   └── route.ts
    │   │   │   ├── reset
    │   │   │   │   └── route.ts
    │   │   │   └── verify-token
    │   │   │       └── route.ts
    │   │   └── revalidate
    │   │       └── route.ts
    │   └── (studio)
    │       ├── admin
    │       │   └── [[...index]]
    │       │       └── page.tsx
    │       └── layout.tsx
    ├── markdown
    │   └── docs
    │       ├── tailwind-template.mdx
    │       ├── style-guide.mdx
    │       ├── contact-form.mdx
    │       ├── bootstrap-template.mdx
    │       └── tailwind-component.mdx
    ├── libs
    │   ├── markdown.ts
    │   ├── email.ts
    │   ├── prismaDB.ts
    │   ├── validateEmail.ts
    │   ├── markdownToHtml.ts
    │   └── auth.ts
    ├── styles
    │   ├── prism-vsc-dark-plus.css
    │   ├── animate.css
    │   ├── tailwind.css
    │   └── star.css
    └── components
        ├── Home
        │   ├── Clients
        │   │   ├── index.tsx
        │   │   ├── clientsData.ts
        │   │   └── SingleClient.tsx
        │   ├── Features
        │   │   ├── index.tsx
        │   │   ├── featuresData.ts
        │   │   └── SingleFeature.tsx
        │   ├── Hero
        │   │   └── index.tsx
        │   ├── FeaturesList
        │   │   ├── index.tsx
        │   │   └── HighLighter.tsx
        │   └── Reviews
        │       ├── index.tsx
        │       ├── SingleReview.tsx
        │       └── reviewsData.ts
        ├── Footer
        │   ├── index.tsx
        │   ├── linksData.ts
        │   └── FooterLinkList.tsx
        ├── ScrollToTop
        │   └── index.tsx
        ├── Faq
        │   ├── index.tsx
        │   ├── SingleFaq.tsx
        │   └── faqData.ts
        ├── About
        │   ├── Team
        │   │   ├── index.tsx
        │   │   ├── SingleTeam.tsx
        │   │   └── teamData.ts
        │   └── AboutSection
        │       └── index.tsx
        ├── Docs
        │   ├── SidebarLink.tsx
        │   └── DocsContent.tsx
        ├── Blog
        │   ├── index.tsx
        │   ├── SingleBlog.tsx
        │   └── BlogGridContainer.tsx
        ├── Common
        │   ├── Loader.tsx
        │   └── SectionTitle.tsx
        ├── Support
        │   └── index.tsx
        ├── Breadcrumb
        │   └── index.tsx
        ├── Newsletter
        │   └── index.tsx
        ├── Pricing
        │   ├── index.tsx
        │   ├── SInglePricing.tsx
        │   ├── OfferItem.tsx
        │   └── PricingGrids.tsx
        └── Header
            ├── index.tsx
            ├── menuData.ts
            └── DropDown.tsx

```

`/Users/rinat/projects/bearby/bearby.io/tailwind.config.js`:

```js
/** @type {import('tailwindcss').Config} */
const defaultTheme = require("tailwindcss/defaultTheme");

module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    fontFamily: {
      "plus-jakarta": ["Plus Jakarta Sans", "sans-serif"],
    },
    container: {
      center: true,
      padding: {
        DEFAULT: "1rem",
        sm: "2rem",
        xl: "0",
      },
    },
    screens: {
      xsm: "375px",
      lsm: "425px",
      "3xl": "2000px",
      ...defaultTheme.screens,
    },
    extend: {
      colors: {
        current: "currentColor",
        transparent: "transparent",
        white: "#FFFFFF",
        dark: {
          DEFAULT: "#030014",
          2: "#495270",
          3: "#918EA0",
          4: "#8D93A5",
          5: "#BBBEC9",
          6: "#191625",
          7: "#0F0C1F",
          8: "#100D20",
        },
        purple: {
          DEFAULT: "#8646F4",
          dark: "#6D28D9",
          "dark-2": "#5B21B6",
          light: "#A78BFA",
          "light-2": "#C4B5FD",
          "light-3": "#DDD6FE",
          "light-4": "#EDE9FE",
          "light-5": "#F5F3FF",
        },
        pink: {
          DEFAULT: "#D345F8",
          dark: "#C814F6",
          light: "#DF76FA",
          "light-2": "#EAA7FC",
          "light-3": "#F6D8FE",
          "light-4": "#FCF1FE",
        },
      },

      fontSize: {
        "heading-1": ["60px", "72px"],
        "heading-2": ["48px", "58px"],
        "heading-3": ["40px", "48px"],
        "heading-4": ["30px", "38px"],
        "heading-5": ["28px", "40px"],
        "heading-6": ["24px", "30px"],
        "custom-1": ["45px", "55px"],
      },
      spacing: {
        4.5: "1.125rem",
        5.5: "1.375rem",
        6.5: "1.625rem",
        7.5: "1.875rem",
        8.5: "2.125rem",
        9.5: "2.375rem",
        10.5: "2.625rem",
        11: "2.75rem",
        11.5: "2.875rem",
        12.5: "3.125rem",
        13: "3.25rem",
        13.5: "3.375rem",
        14: "3.5rem",
        14.5: "3.625rem",
        15: "3.75rem",
        15.5: "3.875rem",
        16: "4rem",
        16.5: "4.125rem",
        17: "4.25rem",
        17.5: "4.375rem",
        18: "4.5rem",
        18.5: "4.625rem",
        19: "4.75rem",
        19.5: "4.875rem",
        21: "5.25rem",
        21.5: "5.375rem",
        22: "5.5rem",
        22.5: "5.625rem",
        24.5: "6.125rem",
        25: "6.25rem",
        25.5: "6.375rem",
        26: "6.5rem",
        27: "6.75rem",
        27.5: "6.875rem",
        29: "7.25rem",
        29.5: "7.375rem",
        30: "7.5rem",
        31: "7.75rem",
        32.5: "8.125rem",
        34.5: "8.625rem",
        35: "8.75rem",
        36.5: "9.125rem",
        37.5: "9.375rem",
        39: "9.75rem",
        39.5: "9.875rem",
        40: "10rem",
        42.5: "10.625rem",
        45: "11.25rem",
        46: "11.5rem",
        47.5: "11.875rem",
        49: "12.25rem",
        50: "12.5rem",
        52: "13rem",
        52.5: "13.125rem",
        54: "13.5rem",
        54.5: "13.625rem",
        55: "13.75rem",
        55.5: "13.875rem",
        59: "14.75rem",
        60: "15rem",
        62.5: "15.625rem",
        65: "16.25rem",
        67: "16.75rem",
        67.5: "16.875rem",
        70: "17.5rem",
        72.5: "18.125rem",
        75: "18.75rem",
        90: "22.5rem",
        92.5: "23.125rem",
        94: "23.5rem",
        100: "25rem",
        110: "27.5rem",
        115: "28.75rem",
        122.5: "30.625rem",
        125: "31.25rem",
        127.5: "31.875rem",
        132.5: "33.125rem",
        142.5: "35.625rem",
        150: "37.5rem",
        166.5: "41.625rem",
        171.5: "42.875rem",
        180: "45rem",
        187.5: "46.875rem",
        192.5: "48.125rem",
        203: "50.75rem",
        230: "57.5rem",
      },
      maxWidth: {
        30: "7.5rem",
        40: "10rem",
        50: "12.5rem",
      },
      zIndex: {
        99999: "99999",
        9999: "9999",
        999: "999",
        1: "1",
      },
      boxShadow: {
        button:
          "inset 0px -6px 15px rgba(156, 178, 255, 0.25), inset 0px 6px 15px rgba(229, 156, 255, 0.25)",
        dark: "0px 2px 4px rgba(11, 20, 51, 0.05), 0px 6px 24px rgba(11, 20, 51, 0.4)",
        video:
          "0px -3px 10px 0px rgba(0, 0, 0, 0.25) inset, 0px 26px 50px 0px rgba(18, 9, 36, 0.10)",
        1: "0px 1px 2px rgba(166, 175, 195, 0.25)",
        2: "0px 2px 4px rgba(148, 163, 184, 0.05), 0px 6px 24px rgba(235, 238, 251, 0.4)",
        3: "0px 2px 16px rgba(13, 10, 44, 0.12)",
        4: "0px -8px 18px rgba(13, 10, 44, 0.04), 0px 13px 40px rgba(13, 10, 44, 0.22)",
        5: "0px -18px 38px rgba(85, 106, 235, 0.04), 0px 4px 10px rgba(85, 106, 235, 0.04), 0px 10px 30px rgba(85, 106, 235, 0.12)",
        6: "0px 34px 26px rgba(13, 10, 44, 0.05), 0px 12px 34px rgba(13, 10, 44, 0.08)",
      },
    },
  },
  plugins: [],
};

```

`/Users/rinat/projects/bearby/bearby.io/next.config.js`:

```js
// /** @type {import('next').NextConfig} */
// const nextConfig = {
//   images: {
//     domains: ["localhost"],
//     remotePatterns: [
//       {
//         protocol: "https",
//         hostname: "cdn.sanity.io",
//         port: "",
//       },
//     ],
//   },
// };

// module.exports = nextConfig;

```

`/Users/rinat/projects/bearby/bearby.io/package.json`:

```json
{
  "name": "ai-tool-nextjs",
  "version": "2.1.0",
  "private": true,
  "engines": {
    "node": ">=16.0.0"
  },
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@next-auth/prisma-adapter": "^1.0.7",
    "@portabletext/react": "^3.0.11",
    "@prisma/client": "^5.5.0",
    "@types/bcrypt": "^5.0.1",
    "@types/node": "^20.8.8",
    "@types/react": "npm:types-react@19.0.0-rc.1",
    "@types/react-dom": "npm:types-react-dom@19.0.0-rc.1",
    "autoprefixer": "^10.4.16",
    "axios": "^1.4.0",
    "bcrypt": "^5.1.1",
    "canvas": "^2.10.1",
    "eslint": "^8.57.0",
    "eslint-config-next": "15.0.3",
    "fslightbox-react": "^1.7.6",
    "gray-matter": "^4.0.3",
    "next": "^15.1.4",
    "next-auth": "^4.24.3",
    "next-mdx-remote": "^4.4.1",
    "nextjs-toploader": "^1.5.3",
    "nodemailer": "^6.9.13",
    "openai": "^4.29.2",
    "postcss": "^8.4.38",
    "prettier": "^3.0.3",
    "prettier-plugin-tailwindcss": "^0.5.6",
    "prisma": "^5.5.0",
    "prismjs": "^1.29.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.4.1",
    "react-infinite-scroll-component": "^6.1.0",
    "react-modal-video": "^2.0.1",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "remark-prism": "^1.3.6",
    "remark-slug": "^7.0.1",
    "sanity": "^3.18.1",
    "stripe": "^14.21.0",
    "styled-components": "^6.1.13",
    "swiper": "^11.0.7",
    "tailwindcss": "^3.3.4",
    "ts-node": "^10.9.1",
    "typescript": "^5.4.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/fslightbox-react": "^1.7.3",
    "@types/nodemailer": "^6.4.14",
    "@types/prismjs": "^1.26.3",
    "@types/remark-prism": "^1.3.4"
  },
  "overrides": {
    "@types/react": "npm:types-react@19.0.0-rc.1",
    "@types/react-dom": "npm:types-react-dom@19.0.0-rc.1"
  }
}

```

`/Users/rinat/projects/bearby/bearby.io/tsconfig.json`:

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```

`/Users/rinat/projects/bearby/bearby.io/postcss.config.js`:

```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

`/Users/rinat/projects/bearby/bearby.io/stripe/pricingData.ts`:

```ts
export const pricingData = [
  {
    id: "price_1NQk5TLtGdPVhGLecVfQ7mn0",
    unit_amount: 100 * 100,
    nickname: "Small",
  },
  {
    id: "price_1NQk55LtGdPVhGLefU8AHqHr",
    unit_amount: 200 * 100,
    nickname: "Medium",
  },
  {
    id: "price_1NQk4eLtGdPVhGLeZsZDsCNz",
    unit_amount: 300 * 100,
    nickname: "Large",
  },
];

```

`/Users/rinat/projects/bearby/bearby.io/src/types/aiExample.ts`:

```ts
export type AiExample = {
  id: number;
  icon: string;
  title: string;
  description: string;
  rotate?: boolean;
  path: string;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/blog.ts`:

```ts
import { PortableTextBlock } from "sanity";

export type Author = {
  name: string;
  image: string;
  bio?: string;
  slug?: any;
  _id?: number | string;
  _ref?: number | string;
};

export type Blog = {
  _id: number;
  title: string;
  slug: any;
  metadata?: string;
  body?: PortableTextBlock[];
  mainImage?: any;
  author?: Author;
  tags?: string[];
  publishedAt?: string;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/faq.ts`:

```ts
export type FAQ = {
  id: number;
  question: string;
  answer: string;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/menu.ts`:

```ts
export type Menu = {
  id: number;
  title: string;
  path?: string;
  newTab?: boolean;
  submenu?: Menu[];
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/footerLink.ts`:

```ts
export type FooterLink = {
  id: number;
  title: string;
  href: string;
  newTab?: boolean;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/review.ts`:

```ts
export type Review = {
  id: number;
  userName: string;
  userDesignation: string;
  userImage: string;
  description: string;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/team.ts`:

```ts
export type Team = {
  id: number;
  name: string;
  designation: string;
  image: string;
  linkedinLink?: string;
  twitterLink?: string;
  githubLink?: string;
};
```

`/Users/rinat/projects/bearby/bearby.io/src/types/feature.ts`:

```ts
export type Feature = {
  id: number;
  icon: string;
  title: string;
  description: string;
  rotate?: boolean;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/types/client.ts`:

```ts
export type Client = {
  id: number;
  image: string;
  title?: string;
  description?: string;
};

```

`/Users/rinat/projects/bearby/bearby.io/src/app/sitemap.js`:

```js
export default async function sitemap() {
  const routes = ["", "/about", "/pricing", "/blog"].map((route) => ({
    url: `${process.env.SITE_URL}${route}`,
    lastModified: new Date().toISOString(),
  }));

  return [...routes];
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/auth/[...nextauth]/route.ts`:

```ts
import NextAuth from "next-auth/next";
import { authOptions } from "@/libs/auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/payment/route.ts`:

```ts
import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";

export async function POST(request: NextRequest) {
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || "", {
    apiVersion: "2023-10-16",
  });
  let data = await request.json();
  let priceId = data.priceId;

  const session = await stripe.checkout.sessions.create({
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    mode: "subscription",
    success_url: process.env.SITE_URL,
    cancel_url: process.env.SITE_URL,
  });

  return NextResponse.json(session.url);
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/generate-content/route.ts`:

```ts
import OpenAI from "openai";

export async function POST(req: Request) {
  const body = await req.json();

  const { prompt, apiKey } = body;

  const openai = new OpenAI({
    apiKey: apiKey ? apiKey : process.env.OPENAI_API_KEY,
  });

  try {
    const chatCompletion = await openai.chat.completions.create({
      messages: prompt,
      model: "gpt-3.5-turbo",
      temperature: 1,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });

    const generatedContent = chatCompletion.choices[0].message?.content;

    return new Response(JSON.stringify(generatedContent));
  } catch (error: any) {
    return new Response(JSON.stringify(error.error.message), { status: 500 });
  }
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/register/route.ts`:

```ts
import { prisma } from "@/libs/prismaDB";
import bcrypt from "bcrypt";
import { NextResponse } from "next/server";

export async function POST(request: any) {
  const body = await request.json();
  const { name, email, password } = body;

  if (!name || !email || !password) {
    return new NextResponse("Missing Fields", { status: 400 });
  }

  const exist = await prisma.user.findUnique({
    where: {
      email,
    },
  });

  if (exist) {
    throw new Error("Email already exists");
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  const user = await prisma.user.create({
    data: {
      name,
      email,
      password: hashedPassword,
    },
  });

  return NextResponse.json(user);
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/forgot-password/update/route.ts`:

```ts
import bcrypt from "bcrypt";
import { prisma } from "@/libs/prismaDB";
import { NextRequest, NextResponse } from "next/server";

import { sendEmail } from "@/libs/email";

export async function POST(request: NextRequest) {
  const body = await request.json();
  const { email, password } = body;

  if (!email || !password) {
    return new NextResponse("Missing Fields", { status: 400 });
  }

  const user = await prisma.user.findUnique({
    where: {
      email,
    },
  });

  if (!user) {
    throw new Error("Email does not exists");
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    await prisma.user.update({
      where: {
        email,
      },
      data: {
        password: hashedPassword,
        passwordResetToken: null,
        passwordResetTokenExp: null,
      },
    });

    return NextResponse.json("Password Updated", { status: 200 });
  } catch (error) {
    return new NextResponse("Internal Error", { status: 500 });
  }
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/forgot-password/reset/route.ts`:

```ts
import bcrypt from "bcrypt";
import { prisma } from "@/libs/prismaDB";
import { NextRequest, NextResponse } from "next/server";
import crypto from "crypto";
import { sendEmail } from "@/libs/email";

export async function POST(request: NextRequest) {
  const body = await request.json();
  const { email } = body;

  if (!email) {
    return new NextResponse("Missing Fields", { status: 400 });
  }

  const user = await prisma.user.findUnique({
    where: {
      email,
    },
  });

  if (!user) {
    throw new Error("Email does not exists");
  }

  const resetToken = crypto.randomBytes(20).toString("hex");

  const passwordResetTokenExp = new Date();
  passwordResetTokenExp.setHours(passwordResetTokenExp.getHours() + 1);

  await prisma.user.update({
    where: {
      email,
    },
    data: {
      passwordResetToken: resetToken,
      passwordResetTokenExp,
    },
  });

  const resetURL = `${process.env.SITE_URL}/auth/reset-password/${resetToken}`;

  try {
    await sendEmail({
      to: email,
      subject: "Reset your password",
      html: ` 
      <div>
        <h1>You requested a password reset</h1>
        <p>Click the link below to reset your password</p>
        <a href="${resetURL}" target="_blank">Reset Password</a>
      </div>
      `,
    });

    return NextResponse.json("An email has been sent to your email", {
      status: 200,
    });
  } catch (error) {
    return NextResponse.json("An error has occurred. Please try again!", {
      status: 500,
    });
  }
}

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/forgot-password/verify-token/route.ts`:

```ts
import { prisma } from "@/libs/prismaDB";
import { NextRequest, NextResponse } from "next/server";

export const POST = async (request: NextRequest) => {
  const body = await request.json();
  const { token } = body;

  if (!token) {
    return new NextResponse("Missing Fields", { status: 400 });
  }

  const user = await prisma.user.findUnique({
    where: {
      passwordResetToken: token,
      passwordResetTokenExp: {
        gte: new Date(),
      },
    },
  });

  if (!user) {
    return new NextResponse("Invalid Token or Token Expired", { status: 400 });
  }

  return NextResponse.json(user);
};

```

`/Users/rinat/projects/bearby/bearby.io/src/app/api/revalidate/route.ts`:

```ts
import { revalidateTag } from "next/cache";
import { type NextRequest, NextResponse } from "next/server";
import { parseBody } from "next-sanity/webhook";

export async function POST(req: NextRequest) {
  try {
    const { body, isValidSignature } = await parseBody<{
      _type: string;
      slug?: string | undefined;
    }>(req, process.env.SANITY_HOOK_SECRET);
    if (!isValidSignature) {
      return new Response("Invalid Signature", { status: 401 });
    }

    if (!body?._type) {
      return new Response("Bad Request", { status: 400 });
    }

    revalidateTag(body._type);
    return NextResponse.json({
      status: 200,
      revalidated: true,
      now: Date.now(),
      body,
    });
  } catch (error: any) {
    console.error(error);
    return new Response(error.message, { status: 500 });
  }
}

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/markdown.ts`:

```ts
import fs from "fs";
import matter from "gray-matter";
import { join } from "path";

const postsDirectory = join(process.cwd(), "src/markdown/docs");

export function getPostSlugs() {
  return fs.readdirSync(postsDirectory);
}

export function getPostBySlug(slug: string, fields: string[] = []) {
  const realSlug = slug.replace(/\.mdx$/, "");
  const fullPath = join(postsDirectory, `${realSlug}.mdx`);
  const fileContents = fs.readFileSync(fullPath, "utf8");
  const { data, content } = matter(fileContents);

  type Items = {
    [key: string]: string;
  };

  const items: Items = {};

  // Ensure only the minimal needed data is exposed
  fields.forEach((field) => {
    if (field === "slug") {
      items[field] = realSlug;
    }
    if (field === "content") {
      items[field] = content;
    }

    if (typeof data[field] !== "undefined") {
      items[field] = data[field];
    }
  });

  return items;
}

export function getAllPosts(fields: string[] = []) {
  const slugs = getPostSlugs();
  const posts = slugs
    .map((slug) => getPostBySlug(slug, fields))
    // sort posts by date in descending order
    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));

  return posts;
}

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/email.ts`:

```ts
import nodemailer from "nodemailer";

type EmailPayload = {
  to: string;
  subject: string;
  html: string;
};

// Replace with your SMTP credentials
const smtpOptions = {
  host: process.env.EMAIL_SERVER_HOST,
  port: parseInt(process.env.EMAIL_SERVER_PORT || "2525"),
  secure: false,
  auth: {
    user: process.env.EMAIL_SERVER_USER,
    pass: process.env.EMAIL_SERVER_PASSWORD,
  },
};

export const sendEmail = async (data: EmailPayload) => {
  const transporter = nodemailer.createTransport({
    ...smtpOptions,
  });

  return await transporter.sendMail({
    from: process.env.EMAIL_FROM,
    ...data,
  });
};

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/prismaDB.ts`:

```ts
import { PrismaClient } from "@prisma/client";

// PrismaClient is attached to the `global` object in development to prevent
// exhausting your database connection limit.
//
// Learn more:
// https://pris.ly/d/help/next-js-best-practices

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: ["query"],
  });

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/validateEmail.ts`:

```ts
export const validateEmail = (email: string) => {
  return String(email)
    .toLowerCase()
    .match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    );
};

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/markdownToHtml.ts`:

```ts
import fs from "fs";
import matter from "gray-matter";
import { join } from "path";
import { remark } from "remark";
import html from "remark-html";

export default async function markdownToHtml(markdown: string) {
  const result = await remark().use(html).process(markdown);
  return result.toString();
}

export function getPostBySlug(slug: string, fields = [], dirName: string) {
  const postsDirectory = join(process.cwd(), `./markdown/${dirName}`);
  const realSlug = slug.replace(/\.mdx$/, "");
  const fullPath = join(postsDirectory, `${realSlug}.mdx`);
  const fileContents = fs.readFileSync(fullPath, "utf8");
  const { data, content } = matter(fileContents);

  const items: any = {};

  // Ensure only the minimal needed data is exposed
  fields.forEach((field) => {
    if (field === "slug") {
      items[field] = realSlug;
    }
    if (field === "content") {
      items[field] = content;
    }

    if (typeof data[field] !== "undefined") {
      items[field] = data[field];
    }
  });

  return items;
}

```

`/Users/rinat/projects/bearby/bearby.io/src/libs/auth.ts`:

```ts
import { prisma } from "@/libs/prismaDB";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import bcrypt from "bcrypt";
import { type NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GitHubProvider from "next-auth/providers/github";
import GoogleProvider from "next-auth/providers/google";
import EmailProvider from "next-auth/providers/email";

export const authOptions: NextAuthOptions = {
  pages: {
    signIn: "/auth/signin",
  },
  adapter: PrismaAdapter(prisma),
  secret: process.env.SECRET,
  session: {
    strategy: "jwt",
  },

  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "text", placeholder: "Jhondoe" },
        password: { label: "Password", type: "password" },
        username: { label: "Username", type: "text", placeholder: "Jhon Doe" },
      },

      async authorize(credentials) {
        // check to see if eamil and password is there
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Please enter an email or password");
        }

        // check to see if user already exist
        const user = await prisma.user.findUnique({
          where: {
            email: credentials.email,
          },
        });

        // if user was not found
        if (!user || !user?.password) {
          throw new Error("No user found");
        }

        // check to see if passwords match
        const passwordMatch = await bcrypt.compare(
          credentials.password,
          user.password,
        );

        if (!passwordMatch) {
          throw new Error("Incorrect password");
        }

        return user;
      },
    }),

    EmailProvider({
      server: {
        host: process.env.EMAIL_SERVER_HOST!,
        port: Number(process.env.EMAIL_SERVER_PORT),
        auth: {
          user: process.env.EMAIL_SERVER_USER!,
          pass: process.env.EMAIL_SERVER_PASSWORD!,
        },
      },
      from: process.env.EMAIL_FROM!,
    }),

    GitHubProvider({
      clientId: process.env.GITHUB_CLIENT_ID!,
      clientSecret: process.env.GITHUB_CLIENT_SECRET!,
    }),

    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],

  // debug: process.env.NODE_ENV === "developement",
};

```

`/Users/rinat/projects/bearby/bearby.io/src/components/Home/Clients/clientsData.ts`:

```ts
import { Client } from "@/types/client";

const clientsData: Client[] = [
  {
    id: 36,
    image: "/images/clients/client-01.svg",
  },
  {
    id: 4,
    image: "/images/clients/client-02.svg",
  },
  {
    id: 407,
    image: "/images/clients/client-03.svg",
  },
  {
    id: 29,
    image: "/images/clients/client-04.svg",
  },
  {
    id: 99,
    image: "/images/clients/client-05.svg",
  },
  {
    id: 79,
    image: "/images/clients/client-06.svg",
  },
  {
    id: 51,
    image: "/images/clients/client-07.svg",
  },
  {
    id: 59,
    image: "/images/clients/client-01.svg",
  },
  {
    id: 92,
    image: "/images/clients/client-02.svg",
  },
  {
    id: 87,
    image: "/images/clients/client-03.svg",
  },
  {
    id: 27,
    image: "/images/clients/client-04.svg",
  },
  {
    id: 52,
    image: "/images/clients/client-05.svg",
  },
  {
    id: 64,
    image: "/images/clients/client-06.svg",
  },
  {
    id: 97,
    image: "/images/clients/client-07.svg",
  },
  {
    id: 32,
    image: "/images/clients/client-01.svg",
  },
  {
    id: 13,
    image: "/images/clients/client-02.svg",
  },
  {
    id: 35,
    image: "/images/clients/client-03.svg",
  },
  {
    id: 67,
    image: "/images/clients/client-04.svg",
  },
  {
    id: 11,
    image: "/images/clients/client-05.svg",
  },
  {
    id: 76,
    image: "/images/clients/client-06.svg",
  },
  {
    id: 2,
    image: "/images/clients/client-07.svg",
  },
  {
    id: 47,
    image: "/images/clients/client-03.svg",
  },
];
export default clientsData;

```

`/Users/rinat/projects/bearby/bearby.io/src/components/Home/Features/featuresData.ts`:

```ts
import { Feature } from "@/types/feature";

const featuresData: Feature[] = [
  {
    id: 1,
    title: "Unmatched Security",
    description:
      "Protect your assets with cutting-edge encryption algorithms, ensuring total safety from cyber threats.",
    icon: "/images/features/icon-01.svg",
  },
  {
    id: 2,
    title: "Private Key Control",
    description:
      "Stay in charge with full ownership of your private keys, eliminating the need for third-party trust.",
    icon: "/images/features/icon-02.svg",
  },
  {
    id: 3,
    title: "Multi-Signature Transactions",
    description:
      "Enhance transaction security with multi-signature functionality, requiring multiple approvals for any action.",
    icon: "/images/features/icon-03.svg",
  },
  {
    id: 4,
    title: "Fast & Reliable Backups",
    description:
      "Easily back up your wallet with encrypted recovery phrases, giving you peace of mind at all times.",
    icon: "/images/features/icon-04.svg",
    rotate: true,
  },
  {
    id: 5,
    title: "Fraud Detection System",
    description:
      "Leverage real-time monitoring powered by AI to identify and prevent fraudulent activities instantly.",
    icon: "/images/features/icon-05.svg",
    rotate: true,
  },
  {
    id: 6,
    title: "Advanced Cryptography",
    description:
      "Benefit from multiple cryptographic layers, ensuring secure storage and transfer of digital assets.",
    icon: "/images/features/icon-06.svg",
    rotate: true,
  },
];

export default featuresData;


```

`/Users/rinat/projects/bearby/bearby.io/src/components/Home/Reviews/reviewsData.ts`:

```ts
import { Review } from "@/types/review";

const reviewsData: Review[] = [
  {
    id: 100,
    userName: "Marc Herrera",
    userDesignation: "@Shane",
    userImage: "/images/user/user-01.png",
    description:
      "ruler characteristic present neighborhood sister available caught then over pound threw page anywhere secret mark whenever went disease dollar hearing partly plenty somewhere aware",
  },
  {
    id: 19,
    userName: "Alfred Montgomery",
    userDesignation: "@Olivia",
    userImage: "/images/user/user-02.png",
    description:
      "local month pale negative last real card north plane thumb seldom gently lie shot floor animal introduced straw fellow applied ago anyway closer bag",
  },
  {
    id: 45,
    userName: "Marvin Williamson",
    userDesignation: "@Jeanette",
    userImage: "/images/user/user-03.png",
    description:
      "state poet carried toward weak corner answer till give play seven bridge finest morning wool or although who twenty elephant slide swam being mix",
  },
  {
    id: 38,
    userName: "David Hudson",
    userDesignation: "@Hilda",
    userImage: "/images/user/user-04.png",
    description:
      "quiet type situation between cattle oxygen could tank class chose social thumb while indicate receive into equally right engineer morning thee promised quite hurry",
  },
  {
    id: 8,
    userName: "Hannah Ruiz",
    userDesignation: "@Mitchell",
    userImage: "/images/user/user-05.png",
    description:
      "freedom public door tall most getting hungry order green only worry parallel obtain yard honor there pitch broke fifth globe development musical push shirt",
  },
  {
    id: 21,
    userName: "Jay Alexander",
    userDesignation: "@Chris",
    userImage: "/images/user/user-06.png",
    description:
      "success remain while fruit shut wait plate instrument experiment shaking layers avoid heat directly dangerous example must family research scared baby did aid least",
  },
  {
    id: 63,
    userName: "Fred Graham",
    userDesignation: "@Allie",
    userImage: "/images/user/user-07.png",
    description:
      "reader halfway choose nails trail kitchen conversation eventually electric courage noun roar construction chose outer oxygen there yard spent pot sport exercise young recall",
  },
  {
    id: 28,
    userName: "Chris Cunningham",
    userDesignation: "@Blake",
    userImage: "/images/user/user-08.png",
    description:
      "crew this composed believed memory stopped close important had recent rocket layers nose tube valley built busy apartment imagine born stiff acres positive press",
  },
  {
    id: 73,
    userName: "Polly Webster",
    userDesignation: "@Adelaide",
    userImage: "/images/user/user-09.png",
    description:
      "seven morning title himself been ice may plural complete not badly anyway principal rain wood have accept busy down like widely one shallow tent",
  },
  {
    id: 14,
    userName: "Gerald Bowers",
    userDesignation: "@Corey",
    userImage: "/images/user/user-06.png",
    description:
      "couple window storm probably away hunt canal dirt such pencil science establish palace are myself entire feel pleasant milk island nearer ring merely imagine",
  },
  {
    id: 801,
    userName: "Dylan Cole",
    userDesignation: "@Lina",
    userImage: "/images/user/user-07.png",
    description:
      "yet during worried measure stiff sport against baseball melted remove team whispered writing cross back lamp smaller not bank shout scale bring naturally though",
  },

  {
    id: 3,
    userName: "Tyler Brooks",
    userDesignation: "@Daisy",
    userImage: "/images/user/user-01.png",
    description:
      "may tight moment figure ready whose married branch tip feathers field station feet union pole night broke tell difficulty lunch complete gentle relationship again",
  },
  {
    id: 74,
    userName: "Winifred Pratt",
    userDesignation: "@Virginia",
    userImage: "/images/user/user-02.png",
    description:
      "replied spider system standard daily practical party heat aboard aloud author instrument frozen mouth tower corner location alive friendly locate farm bad machinery lamp",
  },
  {
    id: 25,
    userName: "Esther Webster",
    userDesignation: "@Jorge",
    userImage: "/images/user/user-03.png",
    description:
      "sort noon composed progress believed threw mother lift mental many silk equally scientist small most correct occasionally title outer blew old stood life around",
  },
  {
    id: 98,
    userName: "Maude Haynes",
    userDesignation: "@Fannie",
    userImage: "/images/user/user-04.png",
    description:
      "add structure neighbor fine never acres regular definition earlier once such require yet break leather do sheet hidden easily report met sat climb underline",
  },
  {
    id: 46,
    userName: "Lela Moran",
    userDesignation: "@Connor",
    userImage: "/images/user/user-05.png",
    description:
      "shells house team shop inch gold mile jungle friendly believed driver court remarkable feature is ability diagram which partly lower already bee push prize",
  },
  {
    id: 18,
    userName: "Bertha McGuire",
    userDesignation: "@Dollie",
    userImage: "/images/user/user-08.png",
    description:
      "coat west similar series copy future include saw bigger bare program paper return musical mad machinery chose art claws stood instant mistake actual heart",
  },
  {
    id: 81,
    userName: "Celia Day",
    userDesignation: "@Edward",
    userImage: "/images/user/user-09.png",
    description:
      "structure spent mean touch since flew island thought burn book question mice silence spell everybody night ought chosen give fair felt together brief ship",
  },
  {
    id: 5,
    userName: "Vera Pearson",
    userDesignation: "@Roxie",
    userImage: "/images/user/user-01.png",
    description:
      "beauty eleven chosen business butter previous four crowd slipped tower cast swam afternoon club salt window explain shade free went complex ought related let",
  },
  {
    id: 8,
    userName: "Allie Hodges",
    userDesignation: "@Ricardo",
    userImage: "/images/user/user-02.png",
    description:
      "weight duck mountain fill upon pie bar sense grow previous unknown hardly group stop writing biggest until lack cotton influence build barn lunch environment",
  },
  {
    id: 80,
    userName: "Lula Gross",
    userDesignation: "@Lizzie",
    userImage: "/images/user/user-03.png",
    description:
      "statement bread later discussion stand other exist plural post action by partly anybody additional die without if hollow frame below silk cell either above",
  },
  {
    id: 44,
    userName: "Mike Romero",
    userDesignation: "@Leonard",
    userImage: "/images/user/user-04.png",
    description:
      "softly distant ear gentle press sale on fear nose although spoken loud bee firm development settlers blood sad official obtain medicine science rain pour",
  },
  {
    id: 74,
    userName: "Aiden Alexander",
    userDesignation: "@Adelaide",
    userImage: "/images/user/user-05.png",
    description:
      "early correctly memory entirely enjoy disease shoe whether minerals front constantly offer hung comfortable fix exciting phrase represent rocket plate track ago north center",
  },
  {
    id: 11,
    userName: "Agnes Adams",
    userDesignation: "@Lucile",
    userImage: "/images/user/user-06.png",
    description:
      "shaking count former arm directly definition mud possible ranch book muscle potatoes fun properly telephone metal name only serious seldom bound hay porch palace",
  },
  {
    id: 7,
    userName: "Gertrude Salazar",
    userDesignation: "@Jeffery",
    userImage: "/images/user/user-07.png",
    description:
      "studied sitting wave what keep glass measure evening smooth pattern story meet green poem wheel wheat shoe gift shelf eat contain swimming sad capital",
  },
  {
    id: 101,
    userName: "Steven McCarthy",
    userDesignation: "@Shawn",
    userImage: "/images/user/user-08.png",
    description:
      "partly which life teacher loose dangerous soon world journey instance immediately judge start rubbed library satisfied control tool what fur although rush room young",
  },
  {
    id: 82,
    userName: "Max Larson",
    userDesignation: "@Lillian",
    userImage: "/images/user/user-09.png",
    description:
      "wild laid whether younger tin mine are shoe softly apart gate nearby gas fell his cell jump announced national symbol pitch pond mysterious herself",
  },
];

export default reviewsData;

```

`/Users/rinat/projects/bearby/bearby.io/src/components/Footer/linksData.ts`:

```ts
import { FooterLink } from "@/types/footerLink";

// export const productsLink: FooterLink[] = [
//   {
//     id: 1,
//     title: "Features",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 2,
//     title: "Integrations",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 3,
//     title: "Pricing",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 4,
//     title: "Changes log",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 5,
//     title: "Roadmap",
//     href: "#",
//     newTab: false,
//   },
// ];

export const companiesLink: FooterLink[] = [
  {
    id: 11,
    title: "Privacy Policy",
    href: "#",
    newTab: false,
  },
  {
    id: 15,
    title: "Extension Policy",
    href: "#",
    newTab: false,
  },
  {
    id: 12,
    title: "Dex Policy",
    href: "#",
    newTab: false,
  },
  {
    id: 13,
    title: "Support",
    href: "#",
    newTab: false,
  },
  {
    id: 14,
    title: "Community",
    href: "#",
    newTab: false,
  },
];
// export const supportsLink: FooterLink[] = [
//   {
//     id: 21,
//     title: "Features",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 32,
//     title: "Integrations",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 43,
//     title: "Pricing",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 54,
//     title: "Changes log",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 65,
//     title: "Roadmap",
//     href: "#",
//     newTab: false,
//   },
//   {
//     id: 65,
//     title: "Roadmap",
//     href: "#",
//     newTab: false,
//   },
// ];

```

`/Users/rinat/projects/bearby/bearby.io/src/components/Faq/faqData.ts`:

```ts
import { FAQ } from "@/types/faq";

const faqData: FAQ[] = [
  {
    id: 74,
    question: "What Is AI Tool Content Writing Tool?",
    answer:
      "Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.",
  },
  {
    id: 100,
    question: "Is there a limit on how much content I can generate?",
    answer:
      "Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.",
  },
  {
    id: 7,
    question: "Is it helpful for Digital Marketer or Content Writer?",
    answer:
      "Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.",
  },
  {
    id: 67,
    question: "What Languages does it supports?",
    answer:
      "Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.",
  },
  {
    id: 9,
    question: "What is SEO Writing AI and how do I use it?",
    answer:
      "Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.",
  },
];

export default faqData;

```

`/Users/rinat/projects/bearby/bearby.io/src/components/About/Team/teamData.ts`:

```ts
import { Team } from "@/types/team";

const teamData: Team[] = [
  {
    id: 76,
    name: "Rinat Khasanshin",
    designation: "CO-FOUNDER & CEO",
    image: "/images/team/rinat.jpeg",
    linkedinLink: "https://www.linkedin.com/in/arc-warden/",
    twitterLink: "https://twitter.com/lich666black",
    githubLink: "https://github.com/hicaru",
  },
];

export default teamData;

```

`/Users/rinat/projects/bearby/bearby.io/src/components/Header/menuData.ts`:

```ts
import { Menu } from "@/types/menu";

const menuData: Menu[] = [
  {
    id: 1,
    title: "Home",
    newTab: false,
    path: "/",
  },
  {
    id: 2,
    title: "About",
    newTab: false,
    path: "/about",
  },
  // {
  //   id: 4,
  //   title: "Blog",
  //   newTab: false,
  //   path: "/blog",
  // },
  {
    id: 3,
    title: "Docs",
    newTab: false,
    path: "/docs",
  },
];

export default menuData;

```